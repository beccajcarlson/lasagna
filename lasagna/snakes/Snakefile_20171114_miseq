from glob import glob
import firesnake
import json


import snakemake
from firesnake3 import call_firesnake

# snakemake.ignore_missing = True

PYTHON2 = 'C:\ProgramData\Anaconda2\python.exe'

WELLS = ['A1']
CYCLES = ['c14-DO'] + ['c%d-SBS_%d' % (i+2, i+1) for i in range(12)] + ['c15-GFP-HA']
TILES = map(str, range(25))

TILE_CONFIG = 'registered/TileConfiguration_60X_endo_5_w_A1.registered.txt'

DISPLAY_RANGES=((500, 5000), 
                (500, 10000), 
                (500, 20000), 
                (500, 12000), 
                (500, 10000))


rule all:
    input:
        expand('process/20X_{well}_Tile-{tile}.log.tif', well=WELLS, tile=TILES)
        # expand('process/20X_{well}_Tile-{tile}.cells.tif', well=WELLS, tile=TILES)


rule align:
    input: 
        lambda wildcards: expand('process/20X_{cycle}_{well}_Tile-{tile}.stitched.tif', cycle=CYCLES, tile=wildcards.tile, well=wildcards.well)
    output:
        'process/20X_{well}_Tile-{tile}.aligned.tif'
    run:
        call_firesnake(input, output, 'align2', display_ranges=DISPLAY_RANGES)

rule transform_LoG:
    input:
        'process/20X_{well}_Tile-{tile}.aligned.tif'
    output:
        'process/20X_{well}_Tile-{tile}.log.tif'
    run:
        call_firesnake(input, output, 'transform_LoG', bsub=True, display_ranges=DISPLAY_RANGES)

rule segment_nuclei:
    input:
        'process/20X_{cycle}_{{well}}_Tile-{{tile}}.stitched.tif'.format(cycle=CYCLES[0]) # DO
    output:
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    run:
        call_firesnake(input, output, 'segment_nuclei', threshold=700, area_min=250, area_max=800)

rule segment_cells:
    input:
        'process/20X_{well}_Tile-{tile}.aligned.tif',
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    output:
        'process/20X_{well}_Tile-{tile}.cells.tif'
    run:
        call_firesnake(input, output, 'segment_cells')

rule find_peaks:
    input:
        'process/20X_{cycle}_{{well}}_Tile-{{tile}}.stitched.tif'.format(cycle=CYCLES[0]) # DO
    output:
        'process/20X_{well}_Tile-{tile}.peaks.tif'
    run:
        call_firesnake(input, output, 'find_peaks') 

rule max_filter:
    input:
        'process/20X_{well}_Tile-{tile}.log.tif'
    output:
        'process/20X_{well}_Tile-{tile}.maxed.tif'
    run:
        call_firesnake(input, output, 'max_filter') 

rule extract_barcodes:
    input:
        'process/20X_{well}_Tile-{tile}.peaks.tif',
        'process/20X_{well}_Tile-{tile}.maxed.tif',
        'process/20X_{well}_Tile-{tile}.cells.tif'
    output:
        'process/20X_{well}_Tile-{tile}.barcodes.pkl'
    run:
        call_firesnake(input, output, 'extract_barcodes', wildcards=dict(wildcards),
            cycles=CYCLES, threshold_DO=THRESHOLD_DO, index_DO=INDEX_DO) 