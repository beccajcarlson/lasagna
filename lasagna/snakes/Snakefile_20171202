from glob import glob
import firesnake
import json


import snakemake
from firesnake3 import call_firesnake

# snakemake.ignore_missing = True

THRESHOLD_DO = 2000
INDEX_DO = None

CYCLES = ['c{cycle_}-SBS-{cycle}'.format(cycle=c + 1, cycle_=c) for c in range(12)]
CYCLES = CYCLES[1:]
CYCLE_PHENOTYPE = 'c12-HA'

WELLS = [r + str(c) for r in 'BCFG' for c in (6,7,10,11)]
WELLS = sorted(set(WELLS) - {'F10', 'F11', 'G10', 'G11'})
TILES = SITES = (7, 7)

RANGE = lambda x: map(str, range(x[0] * x[1]))

TILE_CONFIG = 'registered/TileConfiguration_batch_B2.registered.txt'

DISPLAY_RANGES=((500, 20000), 
                (100, 20000), 
                (100, 20000), 
                (100, 20000), 
                (100, 20000))


CHANNEL_OFFSETS = [(0, 0), (0, 0), (0, 0), (0, 0), (0, 0)]


rule all:
    input:
        # expand('process/20X_{well}_Tile-{tile}.maxed.tif', well=WELLS, tile=RANGE(TILES))
        # expand('process/20X_{well}_Tile-{tile}.nuclei.tif', well=WELLS, tile=TILES)
        # 'process/20X_B11_Tile-0.phenotype_aligned.tif'
        expand('process/20X_{well}_Tile-{tile}.phenotype.pkl', well=WELLS, tile=RANGE(TILES))

rule align:
    priority: -1
    input:
        expand('process/20X_{cycle}/20X_{cycle}_{{well}}_Site-{{tile}}.max.tif', cycle=CYCLES)
    output:
        temp('process/20X_{well}_Tile-{tile}.aligned.tif')
    run:
        call_firesnake(input, output, 'align', display_ranges=DISPLAY_RANGES, channel_offsets=CHANNEL_OFFSETS)

rule transform_LoG:
    input:
        'process/20X_{well}_Tile-{tile}.aligned.tif'
    output:
        temp('process/20X_{well}_Tile-{tile}.log.tif')
    run:
        call_firesnake(input, output, 'transform_LoG', display_ranges=DISPLAY_RANGES)

rule consensus_DO:
    input:
        'process/20X_{well}_Tile-{tile}.log.tif'
    output:
        'process/20X_{well}_Tile-{tile}.consensus_DO.tif'
    run:
        call_firesnake(input, output, 'consensus_DO')

rule find_peaks:
    input:
        'process/20X_{well}_Tile-{tile}.consensus_DO.tif'
    output:
        'process/20X_{well}_Tile-{tile}.peaks.tif'
    run:
        call_firesnake(input, output, 'find_peaks', display_ranges=None) 

rule max_filter:
    input:
        'process/20X_{well}_Tile-{tile}.log.tif'
    output:
        temp('process/20X_{well}_Tile-{tile}.maxed.tif')
    run:
        call_firesnake(input, output, 'max_filter', width=3, display_ranges=DISPLAY_RANGES) 


rule extract_barcodes:
    input:
        'process/20X_{well}_Tile-{tile}.peaks.tif',
        'process/20X_{well}_Tile-{tile}.maxed.tif',
        'process/20X_{well}_Tile-{tile}.cells.tif'
    output:
        'process/20X_{well}_Tile-{tile}.barcodes.pkl'
    run:
        call_firesnake(input, output, 'extract_barcodes', wildcards=dict(wildcards),
            cycles=CYCLES, threshold_DO=THRESHOLD_DO, index_DO=INDEX_DO) 


rule segment_nuclei:
    input:
        'process/20X_{cycle}/20X_{cycle}_{{well}}_Site-{{tile}}.max.tif'.format(cycle=CYCLES[0]) # DO
    output:
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    run:
        call_firesnake(input, output, 'segment_nuclei', threshold=1200, area_min=0.25*150, area_max=0.25*800)

rule segment_cells:
    input:
        'process/20X_{well}_Tile-{tile}.aligned.tif',
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    output:
        'process/20X_{well}_Tile-{tile}.cells.tif'
    run:
        call_firesnake(input, output, 'segment_cells', threshold=4*200)


rule align_phenotype:
    priority: -1
    input:
        'process/20X_{cycle}/20X_{cycle}_{{well}}_Site-{{tile}}.max.tif'.format(cycle=CYCLES[1]),
        'process/20X_{cycle}/20X_{cycle}_{{well}}_Site-{{tile}}.ome.tif'.format(cycle=CYCLE_PHENOTYPE)
    output:
        'process/20X_{well}_Tile-{tile}.phenotype_aligned.tif'
    run:
        call_firesnake(input, output, 'align_phenotype')

rule extract_phenotype:
    input:
        'process/20X_{well}_Tile-{tile}.phenotype_aligned.tif',
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    output:
        'process/20X_{well}_Tile-{tile}.phenotype.pkl'
    run:
        call_firesnake(input, output, 'extract_phenotype', wildcards=dict(wildcards))