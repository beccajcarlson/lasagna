from glob import glob
import firesnake
import json


import snakemake
from firesnake3 import call_firesnake

# snakemake.ignore_missing = True

THRESHOLD_DO = 1000
INDEX_DO = None

CYCLES = ['c1-SBS-1', 'c2-SBS-2', 'c3-SBS-3', 'c4-SBS-4', 'c5-SBS-5', 'c6-SBS-6', 'c7-SBS-7', 'c8-SBS-8']
CYCLES_SEQ = CYCLES

WELLS = [r + str(c) for r in 'BC' for c in (2,3,6,7,10,11)]
WELLS = ['B2']
TILES = SITES = (7, 7)

RANGE = lambda x: map(str, range(x[0] * x[1]))

TILE_CONFIG = 'registered/TileConfiguration_batch_B2.registered.txt'

DISPLAY_RANGES=((500, 65000), 
                (500, 65000), 
                (500, 65000), 
                (500, 65000), 
                (500, 15000))


CHANNEL_OFFSETS = [(0, 0), (0, 0), (1, 0), (1, 1), (0, 0)]

def stitch_input(wildcards):
    # doesn't respect wildcard constraints
    format_ = 'process/{mag}_{cycle}/{mag}_{cycle}_{well}_Site-{{site}}.max.tif'.format(**wildcards)
    sites = firesnake.stitch_input_sites(wildcards['tile'], site_shape=SITES[mag], tile_shape=TILES)
    inputs = []
    for site in sites:
        inputs.append(format_.format(site=site))
    return inputs


rule all:
    input:
        # expand('process/20X_{well}_Tile-{tile}.maxed.tif', well=WELLS, tile=RANGE(TILES))
        # expand('process/20X_{well}_Tile-{tile}.nuclei.tif', well=WELLS, tile=TILES)
        # 'process/20X_B2_Tile-7.barcodes.pkl'
        expand('process/20X_{well}_Tile-{tile}.barcodes.pkl', well=WELLS, tile=RANGE(TILES))

rule align:
    input:
        expand('process/20X_{cycle}/20X_{cycle}_{{well}}_Site-{{tile}}.max.tif', cycle=CYCLES)
    output:
        'process/20X_{well}_Tile-{tile}.aligned.tif'
    run:
        call_firesnake(input, output, 'align', display_ranges=DISPLAY_RANGES, channel_offsets=CHANNEL_OFFSETS)

rule transform_LoG:
    input:
        'process/20X_{well}_Tile-{tile}.aligned.tif'
    output:
        'process/20X_{well}_Tile-{tile}.log.tif'
    run:
        call_firesnake(input, output, 'transform_LoG', display_ranges=DISPLAY_RANGES)

rule consensus_DO:
    input:
        'process/20X_{well}_Tile-{tile}.log.tif'
    output:
        'process/20X_{well}_Tile-{tile}.consensus_DO.tif'
    run:
        call_firesnake(input, output, 'consensus_DO')

rule find_peaks:
    input:
        'process/20X_{well}_Tile-{tile}.consensus_DO.tif'
    output:
        'process/20X_{well}_Tile-{tile}.peaks.tif'
    run:
        call_firesnake(input, output, 'find_peaks', display_ranges=None) 

rule max_filter:
    input:
        'process/20X_{well}_Tile-{tile}.log.tif'
    output:
        'process/20X_{well}_Tile-{tile}.maxed.tif'
    run:
        call_firesnake(input, output, 'max_filter', width=3, display_ranges=DISPLAY_RANGES) 


rule extract_barcodes:
    input:
        'process/20X_{well}_Tile-{tile}.peaks.tif',
        'process/20X_{well}_Tile-{tile}.maxed.tif',
        'process/20X_{well}_Tile-{tile}.cells.tif'
    output:
        'process/20X_{well}_Tile-{tile}.barcodes.pkl'
    run:
        call_firesnake(input, output, 'extract_barcodes', wildcards=dict(wildcards),
            cycles=CYCLES_SEQ, threshold_DO=THRESHOLD_DO, index_DO=INDEX_DO) 


# rule stitch:
#     input: 
#         stitch_input
#     output:
#         'process/20X_{cycle}_{well}_Tile-{tile}.stitched.tif'
#     run:
#         call_firesnake(input, output, 'stitch', tile_config=TILE_CONFIG, display_ranges=DISPLAY_RANGES)


rule segment_nuclei:
    input:
        'process/20X_{cycle}/20X_{cycle}_{{well}}_Site-{{tile}}.max.tif'.format(cycle=CYCLES[0]) # DO
    output:
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    run:
        call_firesnake(input, output, 'segment_nuclei', threshold=700, area_min=150, area_max=800)

rule segment_cells:
    input:
        'process/20X_{well}_Tile-{tile}.aligned.tif',
        'process/20X_{well}_Tile-{tile}.nuclei.tif'
    output:
        'process/20X_{well}_Tile-{tile}.cells.tif'
    run:
        call_firesnake(input, output, 'segment_cells', threshold=200)
